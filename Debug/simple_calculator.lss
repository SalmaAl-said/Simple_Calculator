
simple_calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000022f2  00002366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001878  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b83  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000047b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004913  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00004aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000983c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <main>
      7a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e8       	ldi	r26, 0x8F	; 143
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e8       	ldi	r24, 0x8F	; 143
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e8       	ldi	r22, 0x8F	; 143
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_U8_Set_Pin_Dir>:
#include"DIO_Private.h"
#include"DIO_Config.h"


u8 DIO_U8_Set_Pin_Dir( u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Dir_ID )
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_U8_Set_Pin_Dir+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_U8_Set_Pin_Dir+0x8>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_U8_Set_Pin_Dir+0xa>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
	if( ( Copy_U8_Port_ID >= DIO_MIN_U8_PORT_ID  ) && ( Copy_U8_Port_ID <= DIO_MAX_U8_PORT_ID  ) )
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <DIO_U8_Set_Pin_Dir+0x1c>
     ca8:	e4 c0       	rjmp	.+456    	; 0xe72 <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if ( ( Copy_U8_Pin_ID >= DIO_MIN_U8_PIN_ID ) && ( Copy_U8_Pin_ID <= DIO_MAX_U8_PIN_ID  ) )
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <DIO_U8_Set_Pin_Dir+0x24>
     cb0:	dd c0       	rjmp	.+442    	; 0xe6c <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if ( ( Copy_U8_Dir_ID == DIO_U8_INPUT ) || ( Copy_U8_Dir_ID == DIO_U8_OUTPUT ))
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	88 23       	and	r24, r24
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <DIO_U8_Set_Pin_Dir+0x32>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DIO_U8_Set_Pin_Dir+0x32>
     cbe:	d3 c0       	rjmp	.+422    	; 0xe66 <DIO_U8_Set_Pin_Dir+0x1d8>
			{
				switch ( Copy_U8_Port_ID )
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3e 83       	std	Y+6, r19	; 0x06
     cc8:	2d 83       	std	Y+5, r18	; 0x05
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <DIO_U8_Set_Pin_Dir+0x48>
     cd4:	43 c0       	rjmp	.+134    	; 0xd5c <DIO_U8_Set_Pin_Dir+0xce>
     cd6:	2d 81       	ldd	r18, Y+5	; 0x05
     cd8:	3e 81       	ldd	r19, Y+6	; 0x06
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_U8_Set_Pin_Dir+0x5c>
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	71 f0       	breq	.+28     	; 0xd04 <DIO_U8_Set_Pin_Dir+0x76>
     ce8:	bc c0       	rjmp	.+376    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
     cea:	2d 81       	ldd	r18, Y+5	; 0x05
     cec:	3e 81       	ldd	r19, Y+6	; 0x06
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_U8_Set_Pin_Dir+0x68>
     cf4:	5f c0       	rjmp	.+190    	; 0xdb4 <DIO_U8_Set_Pin_Dir+0x126>
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <DIO_U8_Set_Pin_Dir+0x74>
     d00:	85 c0       	rjmp	.+266    	; 0xe0c <DIO_U8_Set_Pin_Dir+0x17e>
     d02:	af c0       	rjmp	.+350    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORT_A :
					Assign_BIT( DIO_U8_DDRA , Copy_U8_Pin_ID , Copy_U8_Dir_ID  ) ;
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	a1 f4       	brne	.+40     	; 0xd32 <DIO_U8_Set_Pin_Dir+0xa4>
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_U8_Set_Pin_Dir+0x9a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_U8_Set_Pin_Dir+0x96>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	98 c0       	rjmp	.+304    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
     d32:	aa e3       	ldi	r26, 0x3A	; 58
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e3       	ldi	r30, 0x3A	; 58
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_U8_Set_Pin_Dir+0xc2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_U8_Set_Pin_Dir+0xbe>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	83 c0       	rjmp	.+262    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
					break ;
				case PORT_B :
					Assign_BIT( DIO_U8_DDRB , Copy_U8_Pin_ID , Copy_U8_Dir_ID  ) ;
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	a1 f4       	brne	.+40     	; 0xd8a <DIO_U8_Set_Pin_Dir+0xfc>
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_U8_Set_Pin_Dir+0xf2>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_U8_Set_Pin_Dir+0xee>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	6c c0       	rjmp	.+216    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_U8_Set_Pin_Dir+0x11a>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_U8_Set_Pin_Dir+0x116>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	57 c0       	rjmp	.+174    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
					break ;
				case PORT_C :
					Assign_BIT( DIO_U8_DDRC , Copy_U8_Pin_ID , Copy_U8_Dir_ID  ) ;
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	a1 f4       	brne	.+40     	; 0xde2 <DIO_U8_Set_Pin_Dir+0x154>
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_U8_Set_Pin_Dir+0x14a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_U8_Set_Pin_Dir+0x146>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	40 c0       	rjmp	.+128    	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
     de2:	a4 e3       	ldi	r26, 0x34	; 52
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e4 e3       	ldi	r30, 0x34	; 52
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_U8_Set_Pin_Dir+0x172>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_U8_Set_Pin_Dir+0x16e>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	2b c0       	rjmp	.+86     	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
					break ;
				case PORT_D :
					Assign_BIT( DIO_U8_DDRD , Copy_U8_Pin_ID , Copy_U8_Dir_ID  ) ;
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	a1 f4       	brne	.+40     	; 0xe3a <DIO_U8_Set_Pin_Dir+0x1ac>
     e12:	a1 e3       	ldi	r26, 0x31	; 49
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e3       	ldi	r30, 0x31	; 49
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_U8_Set_Pin_Dir+0x1a2>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_U8_Set_Pin_Dir+0x19e>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	14 c0       	rjmp	.+40     	; 0xe62 <DIO_U8_Set_Pin_Dir+0x1d4>
     e3a:	a1 e3       	ldi	r26, 0x31	; 49
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_U8_Set_Pin_Dir+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_U8_Set_Pin_Dir+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
	else
	{
		return Wrong_port_ID ;
	}

	return NO_Wrong ;
     e62:	1c 82       	std	Y+4, r1	; 0x04
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <DIO_U8_Set_Pin_Dir+0x1e8>
					break ;
				}
			}
			else
			{
				return Wrong_dir_ID ;
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else
		{
			return Wrong_pin_ID ;
     e6c:	22 e0       	ldi	r18, 0x02	; 2
     e6e:	2c 83       	std	Y+4, r18	; 0x04
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_U8_Set_Pin_Dir+0x1e8>
		}
	}
	else
	{
		return Wrong_port_ID ;
     e72:	31 e0       	ldi	r19, 0x01	; 1
     e74:	3c 83       	std	Y+4, r19	; 0x04
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_Wrong ;
}
     e78:	26 96       	adiw	r28, 0x06	; 6
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <DIO_U8_Set_Pin_Val>:




u8 DIO_U8_Set_Pin_Val( u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Val_ID )
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <DIO_U8_Set_Pin_Val+0x6>
     e90:	00 d0       	rcall	.+0      	; 0xe92 <DIO_U8_Set_Pin_Val+0x8>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_U8_Set_Pin_Val+0xa>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	6a 83       	std	Y+2, r22	; 0x02
     e9c:	4b 83       	std	Y+3, r20	; 0x03
	if( ( Copy_U8_Port_ID >= DIO_MIN_U8_PORT_ID  ) && ( Copy_U8_Port_ID <= DIO_MAX_U8_PORT_ID  ) )
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO_U8_Set_Pin_Val+0x1c>
     ea4:	e4 c0       	rjmp	.+456    	; 0x106e <DIO_U8_Set_Pin_Val+0x1e4>
	{
		if ( ( Copy_U8_Pin_ID >= DIO_MIN_U8_PIN_ID ) && ( Copy_U8_Pin_ID <= DIO_MAX_U8_PIN_ID  ) )
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	88 30       	cpi	r24, 0x08	; 8
     eaa:	08 f0       	brcs	.+2      	; 0xeae <DIO_U8_Set_Pin_Val+0x24>
     eac:	dd c0       	rjmp	.+442    	; 0x1068 <DIO_U8_Set_Pin_Val+0x1de>
		{
			if ( ( Copy_U8_Val_ID == DIO_U8_LOW ) || ( Copy_U8_Val_ID == DIO_U8_HIGH ))
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	88 23       	and	r24, r24
     eb2:	21 f0       	breq	.+8      	; 0xebc <DIO_U8_Set_Pin_Val+0x32>
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f0       	breq	.+2      	; 0xebc <DIO_U8_Set_Pin_Val+0x32>
     eba:	d3 c0       	rjmp	.+422    	; 0x1062 <DIO_U8_Set_Pin_Val+0x1d8>
			{
				switch ( Copy_U8_Port_ID )
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3e 83       	std	Y+6, r19	; 0x06
     ec4:	2d 83       	std	Y+5, r18	; 0x05
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <DIO_U8_Set_Pin_Val+0x48>
     ed0:	43 c0       	rjmp	.+134    	; 0xf58 <DIO_U8_Set_Pin_Val+0xce>
     ed2:	2d 81       	ldd	r18, Y+5	; 0x05
     ed4:	3e 81       	ldd	r19, Y+6	; 0x06
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	2c f4       	brge	.+10     	; 0xee6 <DIO_U8_Set_Pin_Val+0x5c>
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	71 f0       	breq	.+28     	; 0xf00 <DIO_U8_Set_Pin_Val+0x76>
     ee4:	bc c0       	rjmp	.+376    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
     ee6:	2d 81       	ldd	r18, Y+5	; 0x05
     ee8:	3e 81       	ldd	r19, Y+6	; 0x06
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	09 f4       	brne	.+2      	; 0xef2 <DIO_U8_Set_Pin_Val+0x68>
     ef0:	5f c0       	rjmp	.+190    	; 0xfb0 <DIO_U8_Set_Pin_Val+0x126>
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	91 05       	cpc	r25, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <DIO_U8_Set_Pin_Val+0x74>
     efc:	85 c0       	rjmp	.+266    	; 0x1008 <DIO_U8_Set_Pin_Val+0x17e>
     efe:	af c0       	rjmp	.+350    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
				{
				case PORT_A :
					Assign_BIT( DIO_U8_PORTA , Copy_U8_Pin_ID , Copy_U8_Val_ID  ) ;
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	a1 f4       	brne	.+40     	; 0xf2e <DIO_U8_Set_Pin_Val+0xa4>
     f06:	ab e3       	ldi	r26, 0x3B	; 59
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	eb e3       	ldi	r30, 0x3B	; 59
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_U8_Set_Pin_Val+0x9a>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_U8_Set_Pin_Val+0x96>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	98 c0       	rjmp	.+304    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
     f2e:	ab e3       	ldi	r26, 0x3B	; 59
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e3       	ldi	r30, 0x3B	; 59
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_U8_Set_Pin_Val+0xc2>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_U8_Set_Pin_Val+0xbe>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	83 c0       	rjmp	.+262    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
					break ;
				case PORT_B :
					Assign_BIT( DIO_U8_PORTB , Copy_U8_Pin_ID , Copy_U8_Val_ID  ) ;
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	a1 f4       	brne	.+40     	; 0xf86 <DIO_U8_Set_Pin_Val+0xfc>
     f5e:	a8 e3       	ldi	r26, 0x38	; 56
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e3       	ldi	r30, 0x38	; 56
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_U8_Set_Pin_Val+0xf2>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_U8_Set_Pin_Val+0xee>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	6c c0       	rjmp	.+216    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
     f86:	a8 e3       	ldi	r26, 0x38	; 56
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e3       	ldi	r30, 0x38	; 56
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_U8_Set_Pin_Val+0x11a>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_U8_Set_Pin_Val+0x116>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	57 c0       	rjmp	.+174    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
					break ;
				case PORT_C :
					Assign_BIT( DIO_U8_PORTC , Copy_U8_Pin_ID , Copy_U8_Val_ID  ) ;
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	a1 f4       	brne	.+40     	; 0xfde <DIO_U8_Set_Pin_Val+0x154>
     fb6:	a5 e3       	ldi	r26, 0x35	; 53
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e3       	ldi	r30, 0x35	; 53
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_U8_Set_Pin_Val+0x14a>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_U8_Set_Pin_Val+0x146>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	40 c0       	rjmp	.+128    	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
     fde:	a5 e3       	ldi	r26, 0x35	; 53
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e3       	ldi	r30, 0x35	; 53
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_U8_Set_Pin_Val+0x172>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_U8_Set_Pin_Val+0x16e>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	2b c0       	rjmp	.+86     	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
					break ;
				case PORT_D :
					Assign_BIT( DIO_U8_PORTD , Copy_U8_Pin_ID , Copy_U8_Val_ID  ) ;
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	a1 f4       	brne	.+40     	; 0x1036 <DIO_U8_Set_Pin_Val+0x1ac>
    100e:	a2 e3       	ldi	r26, 0x32	; 50
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e2 e3       	ldi	r30, 0x32	; 50
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_U8_Set_Pin_Val+0x1a2>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_U8_Set_Pin_Val+0x19e>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	14 c0       	rjmp	.+40     	; 0x105e <DIO_U8_Set_Pin_Val+0x1d4>
    1036:	a2 e3       	ldi	r26, 0x32	; 50
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e2 e3       	ldi	r30, 0x32	; 50
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_U8_Set_Pin_Val+0x1ca>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_U8_Set_Pin_Val+0x1c6>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
	else
	{
		return Wrong_port_ID ;
	}

	return NO_Wrong ;
    105e:	1c 82       	std	Y+4, r1	; 0x04
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <DIO_U8_Set_Pin_Val+0x1e8>
					break ;
				}
			}
			else
			{
				return Wrong_Val_ID  ;
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <DIO_U8_Set_Pin_Val+0x1e8>
			}
		}
		else
		{
			return Wrong_pin_ID ;
    1068:	22 e0       	ldi	r18, 0x02	; 2
    106a:	2c 83       	std	Y+4, r18	; 0x04
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_U8_Set_Pin_Val+0x1e8>
		}
	}
	else
	{
		return Wrong_port_ID ;
    106e:	31 e0       	ldi	r19, 0x01	; 1
    1070:	3c 83       	std	Y+4, r19	; 0x04
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_Wrong ;
}
    1074:	26 96       	adiw	r28, 0x06	; 6
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir( u8 Copy_U8_Port_ID ,  u8 Copy_U8_Dir_ID )
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <DIO_U8_Set_Port_Dir+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_U8_Set_Port_Dir+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	if ( ( Copy_U8_Port_ID >= DIO_MIN_U8_PORT_ID  ) && ( Copy_U8_Port_ID <= DIO_MAX_U8_PORT_ID  ))
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	a0 f5       	brcc	.+104    	; 0x1106 <DIO_U8_Set_Port_Dir+0x80>
	{
			switch ( Copy_U8_Port_ID )
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3d 83       	std	Y+5, r19	; 0x05
    10a6:	2c 83       	std	Y+4, r18	; 0x04
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <DIO_U8_Set_Port_Dir+0x60>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <DIO_U8_Set_Port_Dir+0x40>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	61 f0       	breq	.+24     	; 0x10dc <DIO_U8_Set_Port_Dir+0x56>
    10c4:	1e c0       	rjmp	.+60     	; 0x1102 <DIO_U8_Set_Port_Dir+0x7c>
    10c6:	2c 81       	ldd	r18, Y+4	; 0x04
    10c8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <DIO_U8_Set_Port_Dir+0x6a>
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <DIO_U8_Set_Port_Dir+0x74>
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <DIO_U8_Set_Port_Dir+0x7c>
				{
				case PORT_A :
					DIO_U8_DDRA = Copy_U8_Dir_ID ;
    10dc:	ea e3       	ldi	r30, 0x3A	; 58
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	80 83       	st	Z, r24
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <DIO_U8_Set_Port_Dir+0x7c>
					break ;
				case PORT_B :
					DIO_U8_DDRB = Copy_U8_Dir_ID ;
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	80 83       	st	Z, r24
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <DIO_U8_Set_Port_Dir+0x7c>
					break ;
				case PORT_C :
					DIO_U8_DDRC = Copy_U8_Dir_ID ;
    10f0:	e4 e3       	ldi	r30, 0x34	; 52
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <DIO_U8_Set_Port_Dir+0x7c>
					break ;
				case PORT_D :
					DIO_U8_DDRD = Copy_U8_Dir_ID ;
    10fa:	e1 e3       	ldi	r30, 0x31	; 49
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	80 83       	st	Z, r24
	}
	else
	{
		return Wrong_port_ID ;
	}
	return NO_Wrong ;
    1102:	1b 82       	std	Y+3, r1	; 0x03
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_U8_Set_Port_Dir+0x84>
				}

	}
	else
	{
		return Wrong_port_ID ;
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	9b 83       	std	Y+3, r25	; 0x03
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return NO_Wrong ;
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DIO_U8_Set_Port_Val>:



u8 DIO_U8_Set_Port_Val( u8 Copy_U8_Port_ID ,  u8 Copy_U8_Val_ID )
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_U8_Set_Port_Val+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_U8_Set_Port_Val+0x8>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6a 83       	std	Y+2, r22	; 0x02
	if ( ( Copy_U8_Port_ID >= DIO_MIN_U8_PORT_ID  ) && ( Copy_U8_Port_ID <= DIO_MAX_U8_PORT_ID  ))
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	a0 f5       	brcc	.+104    	; 0x119c <DIO_U8_Set_Port_Val+0x80>
	{
			switch ( Copy_U8_Port_ID )
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	d1 f0       	breq	.+52     	; 0x117c <DIO_U8_Set_Port_Val+0x60>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_U8_Set_Port_Val+0x40>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <DIO_U8_Set_Port_Val+0x56>
    115a:	1e c0       	rjmp	.+60     	; 0x1198 <DIO_U8_Set_Port_Val+0x7c>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	81 f0       	breq	.+32     	; 0x1186 <DIO_U8_Set_Port_Val+0x6a>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <DIO_U8_Set_Port_Val+0x74>
    1170:	13 c0       	rjmp	.+38     	; 0x1198 <DIO_U8_Set_Port_Val+0x7c>
				{
				case PORT_A :
					DIO_U8_PORTA = Copy_U8_Val_ID ;
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	0e c0       	rjmp	.+28     	; 0x1198 <DIO_U8_Set_Port_Val+0x7c>
					break ;
				case PORT_B :
					DIO_U8_PORTB = Copy_U8_Val_ID ;
    117c:	e8 e3       	ldi	r30, 0x38	; 56
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <DIO_U8_Set_Port_Val+0x7c>
					break ;
				case PORT_C :
					DIO_U8_PORTC = Copy_U8_Val_ID ;
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	80 83       	st	Z, r24
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <DIO_U8_Set_Port_Val+0x7c>
					break ;
				case PORT_D :
					DIO_U8_PORTD = Copy_U8_Val_ID ;
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	80 83       	st	Z, r24
	}
	else
	{
		return Wrong_port_ID ;
	}
	return NO_Wrong ;
    1198:	1b 82       	std	Y+3, r1	; 0x03
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_U8_Set_Port_Val+0x84>
				}

	}
	else
	{
		return Wrong_port_ID ;
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	9b 83       	std	Y+3, r25	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return NO_Wrong ;
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_U8_Get_Pin_Value>:


u8 DIO_U8_Get_Pin_Value ( u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Val )
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	27 97       	sbiw	r28, 0x07	; 7
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
    11ca:	5c 83       	std	Y+4, r21	; 0x04
    11cc:	4b 83       	std	Y+3, r20	; 0x03
	if ( ( Copy_U8_Port_ID >= DIO_MIN_U8_PORT_ID  ) && ( Copy_U8_Port_ID <= DIO_MAX_U8_PORT_ID  ) )
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <DIO_U8_Get_Pin_Value+0x24>
    11d4:	79 c0       	rjmp	.+242    	; 0x12c8 <DIO_U8_Get_Pin_Value+0x116>
	{
		if ( ( Copy_U8_Pin_ID >= DIO_MIN_U8_PIN_ID ) && ( Copy_U8_Pin_ID <= DIO_MAX_U8_PIN_ID  ) )
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_U8_Get_Pin_Value+0x2c>
    11dc:	72 c0       	rjmp	.+228    	; 0x12c2 <DIO_U8_Get_Pin_Value+0x110>
		{
			switch ( Copy_U8_Port_ID )
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3f 83       	std	Y+7, r19	; 0x07
    11e6:	2e 83       	std	Y+6, r18	; 0x06
    11e8:	4e 81       	ldd	r20, Y+6	; 0x06
    11ea:	5f 81       	ldd	r21, Y+7	; 0x07
    11ec:	41 30       	cpi	r20, 0x01	; 1
    11ee:	51 05       	cpc	r21, r1
    11f0:	59 f1       	breq	.+86     	; 0x1248 <DIO_U8_Get_Pin_Value+0x96>
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	9f 81       	ldd	r25, Y+7	; 0x07
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	91 05       	cpc	r25, r1
    11fa:	34 f4       	brge	.+12     	; 0x1208 <DIO_U8_Get_Pin_Value+0x56>
    11fc:	2e 81       	ldd	r18, Y+6	; 0x06
    11fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1200:	21 15       	cp	r18, r1
    1202:	31 05       	cpc	r19, r1
    1204:	69 f0       	breq	.+26     	; 0x1220 <DIO_U8_Get_Pin_Value+0x6e>
    1206:	5b c0       	rjmp	.+182    	; 0x12be <DIO_U8_Get_Pin_Value+0x10c>
    1208:	4e 81       	ldd	r20, Y+6	; 0x06
    120a:	5f 81       	ldd	r21, Y+7	; 0x07
    120c:	42 30       	cpi	r20, 0x02	; 2
    120e:	51 05       	cpc	r21, r1
    1210:	79 f1       	breq	.+94     	; 0x1270 <DIO_U8_Get_Pin_Value+0xbe>
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	9f 81       	ldd	r25, Y+7	; 0x07
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <DIO_U8_Get_Pin_Value+0x6c>
    121c:	3d c0       	rjmp	.+122    	; 0x1298 <DIO_U8_Get_Pin_Value+0xe6>
    121e:	4f c0       	rjmp	.+158    	; 0x12be <DIO_U8_Get_Pin_Value+0x10c>
					{
					case PORT_A :
						*Copy_U8_Pin_Val = GET_BIT( DIO_U8_PINA  , Copy_U8_Pin_ID ) ;
    1220:	e9 e3       	ldi	r30, 0x39	; 57
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_U8_Get_Pin_Value+0x86>
    1234:	55 95       	asr	r21
    1236:	47 95       	ror	r20
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_U8_Get_Pin_Value+0x82>
    123c:	ca 01       	movw	r24, r20
    123e:	81 70       	andi	r24, 0x01	; 1
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	80 83       	st	Z, r24
    1246:	3b c0       	rjmp	.+118    	; 0x12be <DIO_U8_Get_Pin_Value+0x10c>
						break ;
					case PORT_B :
						*Copy_U8_Pin_Val = GET_BIT( DIO_U8_PINA , Copy_U8_Pin_ID ) ;
    1248:	e9 e3       	ldi	r30, 0x39	; 57
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_U8_Get_Pin_Value+0xae>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_U8_Get_Pin_Value+0xaa>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	80 83       	st	Z, r24
    126e:	27 c0       	rjmp	.+78     	; 0x12be <DIO_U8_Get_Pin_Value+0x10c>
						break ;
					case PORT_C :
						*Copy_U8_Pin_Val = GET_BIT( DIO_U8_PINA , Copy_U8_Pin_ID ) ;
    1270:	e9 e3       	ldi	r30, 0x39	; 57
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_U8_Get_Pin_Value+0xd6>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_U8_Get_Pin_Value+0xd2>
    128c:	ca 01       	movw	r24, r20
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	eb 81       	ldd	r30, Y+3	; 0x03
    1292:	fc 81       	ldd	r31, Y+4	; 0x04
    1294:	80 83       	st	Z, r24
    1296:	13 c0       	rjmp	.+38     	; 0x12be <DIO_U8_Get_Pin_Value+0x10c>
						break ;
					case PORT_D :
						*Copy_U8_Pin_Val = GET_BIT( DIO_U8_PINA , Copy_U8_Pin_ID ) ;
    1298:	e9 e3       	ldi	r30, 0x39	; 57
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_U8_Get_Pin_Value+0xfe>
    12ac:	55 95       	asr	r21
    12ae:	47 95       	ror	r20
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_U8_Get_Pin_Value+0xfa>
    12b4:	ca 01       	movw	r24, r20
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ba:	fc 81       	ldd	r31, Y+4	; 0x04
    12bc:	80 83       	st	Z, r24
	}
	else
	{
		return Wrong_port_ID ;
	}
	return NO_Wrong ;
    12be:	1d 82       	std	Y+5, r1	; 0x05
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <DIO_U8_Get_Pin_Value+0x11a>
						break ;
					}
		}
		else
		{
			return Wrong_pin_ID ;
    12c2:	52 e0       	ldi	r21, 0x02	; 2
    12c4:	5d 83       	std	Y+5, r21	; 0x05
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_U8_Get_Pin_Value+0x11a>
		}
	}
	else
	{
		return Wrong_port_ID ;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	return NO_Wrong ;
}
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <KPD_Init>:
/******************************************************************************
*                             FUNCTIONS IMPLEMENTATION                        *
******************************************************************************/

void KPD_Init()
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <KPD_Init+0x6>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    12ea:	1a 82       	std	Y+2, r1	; 0x02
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <KPD_Init+0x2c>
	{
		DIO_U8_Set_Pin_Dir( COL_PORT  , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_OUTPUT  ) ;
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	fc 01       	movw	r30, r24
    12f6:	e5 56       	subi	r30, 0x65	; 101
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	90 81       	ld	r25, Z
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	69 2f       	mov	r22, r25
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_Set_Pin_Dir>

void KPD_Init()
{
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	70 f3       	brcs	.-36     	; 0x12ee <KPD_Init+0xe>
	{
		DIO_U8_Set_Pin_Dir( COL_PORT  , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1312:	19 82       	std	Y+1, r1	; 0x01
    1314:	1b c0       	rjmp	.+54     	; 0x134c <KPD_Init+0x6c>
	{
		DIO_U8_Set_Pin_Dir( ROW_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , DIO_U8_INPUT ) ;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	fc 01       	movw	r30, r24
    131e:	e9 56       	subi	r30, 0x69	; 105
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	90 81       	ld	r25, Z
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	69 2f       	mov	r22, r25
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_Set_Pin_Dir>
		DIO_U8_Set_Pin_Val( ROW_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , DIO_U8_HIGH ) ;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	fc 01       	movw	r30, r24
    1336:	e9 56       	subi	r30, 0x69	; 105
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	90 81       	ld	r25, Z
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	69 2f       	mov	r22, r25
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Dir( COL_PORT  , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	10 f3       	brcs	.-60     	; 0x1316 <KPD_Init+0x36>
	{
		DIO_U8_Set_Pin_Dir( ROW_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , DIO_U8_INPUT ) ;
		DIO_U8_Set_Pin_Val( ROW_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , DIO_U8_HIGH ) ;
	}
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <KPD_Void_GET_Status>:


u8 KPD_Void_GET_Status (  )
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <KPD_Void_GET_Status+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <KPD_Void_GET_Status+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_ARR_VAL ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    136e:	1b 82       	std	Y+3, r1	; 0x03
    1370:	5e c0       	rjmp	.+188    	; 0x142e <KPD_Void_GET_Status+0xd2>
	{
		DIO_U8_Set_Pin_Val( COL_PORT , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_LOW  ) ;
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	e5 56       	subi	r30, 0x65	; 101
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	90 81       	ld	r25, Z
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	69 2f       	mov	r22, r25
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    138a:	1a 82       	std	Y+2, r1	; 0x02
    138c:	3d c0       	rjmp	.+122    	; 0x1408 <KPD_Void_GET_Status+0xac>
		{
			// Key_Num = COL_Index + ( ROW_Index * KPD_ROWS ) ;
			DIO_U8_Get_Pin_Value ( ROW_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	fc 01       	movw	r30, r24
    1396:	e9 56       	subi	r30, 0x69	; 105
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	90 81       	ld	r25, Z
    139c:	9e 01       	movw	r18, r28
    139e:	2c 5f       	subi	r18, 0xFC	; 252
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	69 2f       	mov	r22, r25
    13a6:	a9 01       	movw	r20, r18
    13a8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_U8_Get_Pin_Value>

			if ( KPD_Status == KPD_Key_Pressed )
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	88 23       	and	r24, r24
    13b0:	41 f5       	brne	.+80     	; 0x1402 <KPD_Void_GET_Status+0xa6>
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	48 2f       	mov	r20, r24
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ca 01       	movw	r24, r20
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	fc 01       	movw	r30, r24
    13ce:	e1 56       	subi	r30, 0x61	; 97
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <KPD_Void_GET_Status+0x9a>

			while (KPD_Status == KPD_Key_Pressed)
			{
				DIO_U8_Get_Pin_Value ( ROW_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	fc 01       	movw	r30, r24
    13e0:	e9 56       	subi	r30, 0x69	; 105
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	90 81       	ld	r25, Z
    13e6:	9e 01       	movw	r18, r28
    13e8:	2c 5f       	subi	r18, 0xFC	; 252
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	69 2f       	mov	r22, r25
    13f0:	a9 01       	movw	r20, r18
    13f2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_U8_Get_Pin_Value>

			if ( KPD_Status == KPD_Key_Pressed )
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;

			while (KPD_Status == KPD_Key_Pressed)
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	88 23       	and	r24, r24
    13fa:	71 f3       	breq	.-36     	; 0x13d8 <KPD_Void_GET_Status+0x7c>
			{
				DIO_U8_Get_Pin_Value ( ROW_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
			}
			return Presskey ;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	1c c0       	rjmp	.+56     	; 0x143a <KPD_Void_GET_Status+0xde>

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Val( COL_PORT , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_LOW  ) ;

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	08 f4       	brcc	.+2      	; 0x1410 <KPD_Void_GET_Status+0xb4>
    140e:	bf cf       	rjmp	.-130    	; 0x138e <KPD_Void_GET_Status+0x32>
			return Presskey ;
			}

		}

		DIO_U8_Set_Pin_Val( COL_PORT , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_HIGH ) ;
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	fc 01       	movw	r30, r24
    1418:	e5 56       	subi	r30, 0x65	; 101
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	90 81       	ld	r25, Z
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	69 2f       	mov	r22, r25
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
{
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_ARR_VAL ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	08 f4       	brcc	.+2      	; 0x1436 <KPD_Void_GET_Status+0xda>
    1434:	9e cf       	rjmp	.-196    	; 0x1372 <KPD_Void_GET_Status+0x16>

		}

		DIO_U8_Set_Pin_Val( COL_PORT , KPD_AU8_COLS_PINS[COL_Index] , DIO_U8_HIGH ) ;
	}
	return Presskey ;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	8d 83       	std	Y+5, r24	; 0x05
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <LCD_Void_Init>:
/******************************************************************************
*                             FUNCTIONS IMPLEMENTATION                        *
******************************************************************************/

void LCD_Void_Init (void)
{
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	cc 54       	subi	r28, 0x4C	; 76
    145a:	d0 40       	sbci	r29, 0x00	; 0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_Set_Pin_Dir( LCD_U8_CTRL_PORT  , LCD_U8_RS_PIN , DIO_U8_OUTPUT  ) ;
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_Dir( LCD_U8_CTRL_PORT  , LCD_U8_RW_PIN , DIO_U8_OUTPUT  ) ;
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_Dir( LCD_U8_CTRL_PORT  , LCD_U8_E_PIN , DIO_U8_OUTPUT  ) ;
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	62 e0       	ldi	r22, 0x02	; 2
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Port_Dir( LCD_U8_DATA_PORT , 0xff ) ;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	0e 94 43 08 	call	0x1086	; 0x1086 <DIO_U8_Set_Port_Dir>
    148c:	fe 01       	movw	r30, r28
    148e:	e7 5b       	subi	r30, 0xB7	; 183
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e2       	ldi	r26, 0x20	; 32
    1498:	b2 e4       	ldi	r27, 0x42	; 66
    149a:	80 83       	st	Z, r24
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	a2 83       	std	Z+2, r26	; 0x02
    14a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a2:	8e 01       	movw	r16, r28
    14a4:	0b 5b       	subi	r16, 0xBB	; 187
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	fe 01       	movw	r30, r28
    14aa:	e7 5b       	subi	r30, 0xB7	; 183
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4a ef       	ldi	r20, 0xFA	; 250
    14bc:	54 e4       	ldi	r21, 0x44	; 68
    14be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 83       	st	Z, r24
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	a2 83       	std	Z+2, r26	; 0x02
    14ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d0:	fe 01       	movw	r30, r28
    14d2:	eb 5b       	subi	r30, 0xBB	; 187
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ea:	88 23       	and	r24, r24
    14ec:	44 f4       	brge	.+16     	; 0x14fe <LCD_Void_Init+0xb2>
		__ticks = 1;
    14ee:	fe 01       	movw	r30, r28
    14f0:	ed 5b       	subi	r30, 0xBD	; 189
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
    14fc:	64 c0       	rjmp	.+200    	; 0x15c6 <LCD_Void_Init+0x17a>
	else if (__tmp > 65535)
    14fe:	fe 01       	movw	r30, r28
    1500:	eb 5b       	subi	r30, 0xBB	; 187
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	0c f0       	brlt	.+2      	; 0x151e <LCD_Void_Init+0xd2>
    151c:	43 c0       	rjmp	.+134    	; 0x15a4 <LCD_Void_Init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151e:	fe 01       	movw	r30, r28
    1520:	e7 5b       	subi	r30, 0xB7	; 183
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8e 01       	movw	r16, r28
    153e:	0d 5b       	subi	r16, 0xBD	; 189
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	f8 01       	movw	r30, r16
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	80 83       	st	Z, r24
    1554:	1f c0       	rjmp	.+62     	; 0x1594 <LCD_Void_Init+0x148>
    1556:	fe 01       	movw	r30, r28
    1558:	ef 5b       	subi	r30, 0xBF	; 191
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	88 ec       	ldi	r24, 0xC8	; 200
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1564:	fe 01       	movw	r30, r28
    1566:	ef 5b       	subi	r30, 0xBF	; 191
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <LCD_Void_Init+0x122>
    1572:	fe 01       	movw	r30, r28
    1574:	ef 5b       	subi	r30, 0xBF	; 191
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	de 01       	movw	r26, r28
    157e:	ad 5b       	subi	r26, 0xBD	; 189
    1580:	bf 4f       	sbci	r27, 0xFF	; 255
    1582:	fe 01       	movw	r30, r28
    1584:	ed 5b       	subi	r30, 0xBD	; 189
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	9c 93       	st	X, r25
    1592:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	fe 01       	movw	r30, r28
    1596:	ed 5b       	subi	r30, 0xBD	; 189
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	d1 f6       	brne	.-76     	; 0x1556 <LCD_Void_Init+0x10a>
    15a2:	24 c0       	rjmp	.+72     	; 0x15ec <LCD_Void_Init+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	8e 01       	movw	r16, r28
    15a6:	0d 5b       	subi	r16, 0xBD	; 189
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	fe 01       	movw	r30, r28
    15ac:	eb 5b       	subi	r30, 0xBB	; 187
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	f8 01       	movw	r30, r16
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
    15c6:	fe 01       	movw	r30, r28
    15c8:	ed 5b       	subi	r30, 0xBD	; 189
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	fe 01       	movw	r30, r28
    15d2:	ff 96       	adiw	r30, 0x3f	; 63
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	fe 01       	movw	r30, r28
    15da:	ff 96       	adiw	r30, 0x3f	; 63
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_Void_Init+0x194>
    15e4:	fe 01       	movw	r30, r28
    15e6:	ff 96       	adiw	r30, 0x3f	; 63
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_Void_Write_CMD (0b00111000);
    15ec:	88 e3       	ldi	r24, 0x38	; 56
    15ee:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a8 e4       	ldi	r26, 0x48	; 72
    15f8:	b2 e4       	ldi	r27, 0x42	; 66
    15fa:	8b af       	std	Y+59, r24	; 0x3b
    15fc:	9c af       	std	Y+60, r25	; 0x3c
    15fe:	ad af       	std	Y+61, r26	; 0x3d
    1600:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1602:	6b ad       	ldd	r22, Y+59	; 0x3b
    1604:	7c ad       	ldd	r23, Y+60	; 0x3c
    1606:	8d ad       	ldd	r24, Y+61	; 0x3d
    1608:	9e ad       	ldd	r25, Y+62	; 0x3e
    160a:	2b ea       	ldi	r18, 0xAB	; 171
    160c:	3a ea       	ldi	r19, 0xAA	; 170
    160e:	4a e2       	ldi	r20, 0x2A	; 42
    1610:	50 e4       	ldi	r21, 0x40	; 64
    1612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f ab       	std	Y+55, r24	; 0x37
    161c:	98 af       	std	Y+56, r25	; 0x38
    161e:	a9 af       	std	Y+57, r26	; 0x39
    1620:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1622:	6f a9       	ldd	r22, Y+55	; 0x37
    1624:	78 ad       	ldd	r23, Y+56	; 0x38
    1626:	89 ad       	ldd	r24, Y+57	; 0x39
    1628:	9a ad       	ldd	r25, Y+58	; 0x3a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	1c f4       	brge	.+6      	; 0x1640 <LCD_Void_Init+0x1f4>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	8e ab       	std	Y+54, r24	; 0x36
    163e:	91 c0       	rjmp	.+290    	; 0x1762 <LCD_Void_Init+0x316>
	else if (__tmp > 255)
    1640:	6f a9       	ldd	r22, Y+55	; 0x37
    1642:	78 ad       	ldd	r23, Y+56	; 0x38
    1644:	89 ad       	ldd	r24, Y+57	; 0x39
    1646:	9a ad       	ldd	r25, Y+58	; 0x3a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	53 e4       	ldi	r21, 0x43	; 67
    1650:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	0c f0       	brlt	.+2      	; 0x165a <LCD_Void_Init+0x20e>
    1658:	7b c0       	rjmp	.+246    	; 0x1750 <LCD_Void_Init+0x304>
	{
		_delay_ms(__us / 1000.0);
    165a:	6b ad       	ldd	r22, Y+59	; 0x3b
    165c:	7c ad       	ldd	r23, Y+60	; 0x3c
    165e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1660:	9e ad       	ldd	r25, Y+62	; 0x3e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	54 e4       	ldi	r21, 0x44	; 68
    166a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8a ab       	std	Y+50, r24	; 0x32
    1674:	9b ab       	std	Y+51, r25	; 0x33
    1676:	ac ab       	std	Y+52, r26	; 0x34
    1678:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6a a9       	ldd	r22, Y+50	; 0x32
    167c:	7b a9       	ldd	r23, Y+51	; 0x33
    167e:	8c a9       	ldd	r24, Y+52	; 0x34
    1680:	9d a9       	ldd	r25, Y+53	; 0x35
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a ef       	ldi	r20, 0xFA	; 250
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8e a7       	std	Y+46, r24	; 0x2e
    1694:	9f a7       	std	Y+47, r25	; 0x2f
    1696:	a8 ab       	std	Y+48, r26	; 0x30
    1698:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    169a:	6e a5       	ldd	r22, Y+46	; 0x2e
    169c:	7f a5       	ldd	r23, Y+47	; 0x2f
    169e:	88 a9       	ldd	r24, Y+48	; 0x30
    16a0:	99 a9       	ldd	r25, Y+49	; 0x31
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <LCD_Void_Init+0x270>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9d a7       	std	Y+45, r25	; 0x2d
    16b8:	8c a7       	std	Y+44, r24	; 0x2c
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <LCD_Void_Init+0x2ee>
	else if (__tmp > 65535)
    16bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    16be:	7f a5       	ldd	r23, Y+47	; 0x2f
    16c0:	88 a9       	ldd	r24, Y+48	; 0x30
    16c2:	99 a9       	ldd	r25, Y+49	; 0x31
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <LCD_Void_Init+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6a a9       	ldd	r22, Y+50	; 0x32
    16d6:	7b a9       	ldd	r23, Y+51	; 0x33
    16d8:	8c a9       	ldd	r24, Y+52	; 0x34
    16da:	9d a9       	ldd	r25, Y+53	; 0x35
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9d a7       	std	Y+45, r25	; 0x2d
    16fa:	8c a7       	std	Y+44, r24	; 0x2c
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <LCD_Void_Init+0x2d0>
    16fe:	88 ec       	ldi	r24, 0xC8	; 200
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9b a7       	std	Y+43, r25	; 0x2b
    1704:	8a a7       	std	Y+42, r24	; 0x2a
    1706:	8a a5       	ldd	r24, Y+42	; 0x2a
    1708:	9b a5       	ldd	r25, Y+43	; 0x2b
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_Void_Init+0x2be>
    170e:	9b a7       	std	Y+43, r25	; 0x2b
    1710:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8c a5       	ldd	r24, Y+44	; 0x2c
    1714:	9d a5       	ldd	r25, Y+45	; 0x2d
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9d a7       	std	Y+45, r25	; 0x2d
    171a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8c a5       	ldd	r24, Y+44	; 0x2c
    171e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <LCD_Void_Init+0x2b2>
    1724:	24 c0       	rjmp	.+72     	; 0x176e <LCD_Void_Init+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6e a5       	ldd	r22, Y+46	; 0x2e
    1728:	7f a5       	ldd	r23, Y+47	; 0x2f
    172a:	88 a9       	ldd	r24, Y+48	; 0x30
    172c:	99 a9       	ldd	r25, Y+49	; 0x31
    172e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9d a7       	std	Y+45, r25	; 0x2d
    1738:	8c a7       	std	Y+44, r24	; 0x2c
    173a:	8c a5       	ldd	r24, Y+44	; 0x2c
    173c:	9d a5       	ldd	r25, Y+45	; 0x2d
    173e:	99 a7       	std	Y+41, r25	; 0x29
    1740:	88 a7       	std	Y+40, r24	; 0x28
    1742:	88 a5       	ldd	r24, Y+40	; 0x28
    1744:	99 a5       	ldd	r25, Y+41	; 0x29
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_Void_Init+0x2fa>
    174a:	99 a7       	std	Y+41, r25	; 0x29
    174c:	88 a7       	std	Y+40, r24	; 0x28
    174e:	0f c0       	rjmp	.+30     	; 0x176e <LCD_Void_Init+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1750:	6f a9       	ldd	r22, Y+55	; 0x37
    1752:	78 ad       	ldd	r23, Y+56	; 0x38
    1754:	89 ad       	ldd	r24, Y+57	; 0x39
    1756:	9a ad       	ldd	r25, Y+58	; 0x3a
    1758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	8e ab       	std	Y+54, r24	; 0x36
    1762:	8e a9       	ldd	r24, Y+54	; 0x36
    1764:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1766:	8f a1       	ldd	r24, Y+39	; 0x27
    1768:	8a 95       	dec	r24
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_Void_Init+0x31c>
    176c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_Void_Write_CMD (0b00001100);
    176e:	8c e0       	ldi	r24, 0x0C	; 12
    1770:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a8 e4       	ldi	r26, 0x48	; 72
    177a:	b2 e4       	ldi	r27, 0x42	; 66
    177c:	8b a3       	std	Y+35, r24	; 0x23
    177e:	9c a3       	std	Y+36, r25	; 0x24
    1780:	ad a3       	std	Y+37, r26	; 0x25
    1782:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1784:	6b a1       	ldd	r22, Y+35	; 0x23
    1786:	7c a1       	ldd	r23, Y+36	; 0x24
    1788:	8d a1       	ldd	r24, Y+37	; 0x25
    178a:	9e a1       	ldd	r25, Y+38	; 0x26
    178c:	2b ea       	ldi	r18, 0xAB	; 171
    178e:	3a ea       	ldi	r19, 0xAA	; 170
    1790:	4a e2       	ldi	r20, 0x2A	; 42
    1792:	50 e4       	ldi	r21, 0x40	; 64
    1794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8f 8f       	std	Y+31, r24	; 0x1f
    179e:	98 a3       	std	Y+32, r25	; 0x20
    17a0:	a9 a3       	std	Y+33, r26	; 0x21
    17a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17a6:	78 a1       	ldd	r23, Y+32	; 0x20
    17a8:	89 a1       	ldd	r24, Y+33	; 0x21
    17aa:	9a a1       	ldd	r25, Y+34	; 0x22
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	1c f4       	brge	.+6      	; 0x17c2 <LCD_Void_Init+0x376>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	8e 8f       	std	Y+30, r24	; 0x1e
    17c0:	91 c0       	rjmp	.+290    	; 0x18e4 <LCD_Void_Init+0x498>
	else if (__tmp > 255)
    17c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17c4:	78 a1       	ldd	r23, Y+32	; 0x20
    17c6:	89 a1       	ldd	r24, Y+33	; 0x21
    17c8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	53 e4       	ldi	r21, 0x43	; 67
    17d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	0c f0       	brlt	.+2      	; 0x17dc <LCD_Void_Init+0x390>
    17da:	7b c0       	rjmp	.+246    	; 0x18d2 <LCD_Void_Init+0x486>
	{
		_delay_ms(__us / 1000.0);
    17dc:	6b a1       	ldd	r22, Y+35	; 0x23
    17de:	7c a1       	ldd	r23, Y+36	; 0x24
    17e0:	8d a1       	ldd	r24, Y+37	; 0x25
    17e2:	9e a1       	ldd	r25, Y+38	; 0x26
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8a 8f       	std	Y+26, r24	; 0x1a
    17f6:	9b 8f       	std	Y+27, r25	; 0x1b
    17f8:	ac 8f       	std	Y+28, r26	; 0x1c
    17fa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1800:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1802:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a ef       	ldi	r20, 0xFA	; 250
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8e 8b       	std	Y+22, r24	; 0x16
    1816:	9f 8b       	std	Y+23, r25	; 0x17
    1818:	a8 8f       	std	Y+24, r26	; 0x18
    181a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    181c:	6e 89       	ldd	r22, Y+22	; 0x16
    181e:	7f 89       	ldd	r23, Y+23	; 0x17
    1820:	88 8d       	ldd	r24, Y+24	; 0x18
    1822:	99 8d       	ldd	r25, Y+25	; 0x19
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1830:	88 23       	and	r24, r24
    1832:	2c f4       	brge	.+10     	; 0x183e <LCD_Void_Init+0x3f2>
		__ticks = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9d 8b       	std	Y+21, r25	; 0x15
    183a:	8c 8b       	std	Y+20, r24	; 0x14
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <LCD_Void_Init+0x470>
	else if (__tmp > 65535)
    183e:	6e 89       	ldd	r22, Y+22	; 0x16
    1840:	7f 89       	ldd	r23, Y+23	; 0x17
    1842:	88 8d       	ldd	r24, Y+24	; 0x18
    1844:	99 8d       	ldd	r25, Y+25	; 0x19
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	4c f5       	brge	.+82     	; 0x18a8 <LCD_Void_Init+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1858:	7b 8d       	ldd	r23, Y+27	; 0x1b
    185a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9d 8b       	std	Y+21, r25	; 0x15
    187c:	8c 8b       	std	Y+20, r24	; 0x14
    187e:	0f c0       	rjmp	.+30     	; 0x189e <LCD_Void_Init+0x452>
    1880:	88 ec       	ldi	r24, 0xC8	; 200
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9b 8b       	std	Y+19, r25	; 0x13
    1886:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1888:	8a 89       	ldd	r24, Y+18	; 0x12
    188a:	9b 89       	ldd	r25, Y+19	; 0x13
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_Void_Init+0x440>
    1890:	9b 8b       	std	Y+19, r25	; 0x13
    1892:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	8c 89       	ldd	r24, Y+20	; 0x14
    1896:	9d 89       	ldd	r25, Y+21	; 0x15
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9d 8b       	std	Y+21, r25	; 0x15
    189c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	8c 89       	ldd	r24, Y+20	; 0x14
    18a0:	9d 89       	ldd	r25, Y+21	; 0x15
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <LCD_Void_Init+0x434>
    18a6:	24 c0       	rjmp	.+72     	; 0x18f0 <LCD_Void_Init+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	6e 89       	ldd	r22, Y+22	; 0x16
    18aa:	7f 89       	ldd	r23, Y+23	; 0x17
    18ac:	88 8d       	ldd	r24, Y+24	; 0x18
    18ae:	99 8d       	ldd	r25, Y+25	; 0x19
    18b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9d 8b       	std	Y+21, r25	; 0x15
    18ba:	8c 8b       	std	Y+20, r24	; 0x14
    18bc:	8c 89       	ldd	r24, Y+20	; 0x14
    18be:	9d 89       	ldd	r25, Y+21	; 0x15
    18c0:	99 8b       	std	Y+17, r25	; 0x11
    18c2:	88 8b       	std	Y+16, r24	; 0x10
    18c4:	88 89       	ldd	r24, Y+16	; 0x10
    18c6:	99 89       	ldd	r25, Y+17	; 0x11
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_Void_Init+0x47c>
    18cc:	99 8b       	std	Y+17, r25	; 0x11
    18ce:	88 8b       	std	Y+16, r24	; 0x10
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <LCD_Void_Init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d4:	78 a1       	ldd	r23, Y+32	; 0x20
    18d6:	89 a1       	ldd	r24, Y+33	; 0x21
    18d8:	9a a1       	ldd	r25, Y+34	; 0x22
    18da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8e 8f       	std	Y+30, r24	; 0x1e
    18e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ea:	8a 95       	dec	r24
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_Void_Init+0x49e>
    18ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_Void_Write_CMD (0b00000001);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e4       	ldi	r27, 0x40	; 64
    18fe:	8b 87       	std	Y+11, r24	; 0x0b
    1900:	9c 87       	std	Y+12, r25	; 0x0c
    1902:	ad 87       	std	Y+13, r26	; 0x0d
    1904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8f 83       	std	Y+7, r24	; 0x07
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	a9 87       	std	Y+9, r26	; 0x09
    1924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_Void_Init+0x4fc>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <LCD_Void_Init+0x57a>
	else if (__tmp > 65535)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <LCD_Void_Init+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_Void_Init+0x55c>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_Void_Init+0x54a>
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_Void_Init+0x53e>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <LCD_Void_Init+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_Void_Init+0x586>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    19da:	c4 5b       	subi	r28, 0xB4	; 180
    19dc:	df 4f       	sbci	r29, 0xFF	; 255
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <LCD_Void_Write_CMD>:

void LCD_Void_Write_CMD ( u8 Copy_u8_cmd )
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	0f 92       	push	r0
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Val( LCD_U8_CTRL_PORT , LCD_U8_RS_PIN  , DIO_U8_LOW  ) ;
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	LCD_Void_Write( Copy_u8_cmd ) ;
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_Void_Write>
}
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <LCD_Void_Write_Data>:


void LCD_Void_Write_Data ( u8 Copy_u8_data )
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Val( LCD_U8_CTRL_PORT , LCD_U8_RS_PIN  , DIO_U8_HIGH  ) ;
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	LCD_Void_Write( Copy_u8_data ) ;
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_Void_Write>
}
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <LCD_Void_Write>:

void LCD_Void_Write ( u8 Copy_u8_Val )
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2f 97       	sbiw	r28, 0x0f	; 15
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_U8_Set_Pin_Val( LCD_U8_CTRL_PORT , LCD_U8_RW_PIN   , DIO_U8_LOW   ) ;
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>

	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN0   , GET_BIT(Copy_u8_Val,0)  ) ;
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	91 70       	andi	r25, 0x01	; 1
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	49 2f       	mov	r20, r25
    1a66:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN1   , GET_BIT(Copy_u8_Val,1)  ) ;
    1a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6c:	86 95       	lsr	r24
    1a6e:	98 2f       	mov	r25, r24
    1a70:	91 70       	andi	r25, 0x01	; 1
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	49 2f       	mov	r20, r25
    1a78:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN2   , GET_BIT(Copy_u8_Val,2)  ) ;
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	86 95       	lsr	r24
    1a80:	86 95       	lsr	r24
    1a82:	98 2f       	mov	r25, r24
    1a84:	91 70       	andi	r25, 0x01	; 1
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	49 2f       	mov	r20, r25
    1a8c:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN3   , GET_BIT(Copy_u8_Val,3)  ) ;
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	86 95       	lsr	r24
    1a94:	86 95       	lsr	r24
    1a96:	86 95       	lsr	r24
    1a98:	98 2f       	mov	r25, r24
    1a9a:	91 70       	andi	r25, 0x01	; 1
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	63 e0       	ldi	r22, 0x03	; 3
    1aa0:	49 2f       	mov	r20, r25
    1aa2:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN4   , GET_BIT(Copy_u8_Val,4)  ) ;
    1aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa8:	82 95       	swap	r24
    1aaa:	8f 70       	andi	r24, 0x0F	; 15
    1aac:	98 2f       	mov	r25, r24
    1aae:	91 70       	andi	r25, 0x01	; 1
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	64 e0       	ldi	r22, 0x04	; 4
    1ab4:	49 2f       	mov	r20, r25
    1ab6:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN5   , GET_BIT(Copy_u8_Val,5)  ) ;
    1aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abc:	82 95       	swap	r24
    1abe:	86 95       	lsr	r24
    1ac0:	87 70       	andi	r24, 0x07	; 7
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	91 70       	andi	r25, 0x01	; 1
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	49 2f       	mov	r20, r25
    1acc:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN6   , GET_BIT(Copy_u8_Val,6)  ) ;
    1ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad2:	82 95       	swap	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	86 95       	lsr	r24
    1ad8:	83 70       	andi	r24, 0x03	; 3
    1ada:	98 2f       	mov	r25, r24
    1adc:	91 70       	andi	r25, 0x01	; 1
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	66 e0       	ldi	r22, 0x06	; 6
    1ae2:	49 2f       	mov	r20, r25
    1ae4:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
	DIO_U8_Set_Pin_Val( LCD_U8_DATA_PORT  , LCD_U8_DATA_PIN7   , GET_BIT(Copy_u8_Val,7)  ) ;
    1ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aea:	98 2f       	mov	r25, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	99 27       	eor	r25, r25
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	67 e0       	ldi	r22, 0x07	; 7
    1af6:	49 2f       	mov	r20, r25
    1af8:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>

	DIO_U8_Set_Pin_Val( LCD_U8_CTRL_PORT  , LCD_U8_E_PIN   , DIO_U8_HIGH   ) ;
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e8       	ldi	r26, 0x80	; 128
    1b0c:	bf e3       	ldi	r27, 0x3F	; 63
    1b0e:	8b 87       	std	Y+11, r24	; 0x0b
    1b10:	9c 87       	std	Y+12, r25	; 0x0c
    1b12:	ad 87       	std	Y+13, r26	; 0x0d
    1b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	a9 87       	std	Y+9, r26	; 0x09
    1b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_Void_Write+0x11e>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LCD_Void_Write+0x19c>
	else if (__tmp > 65535)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LCD_Void_Write+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LCD_Void_Write+0x17e>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_Void_Write+0x16c>
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LCD_Void_Write+0x160>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <LCD_Void_Write+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_Void_Write+0x1a8>
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_U8_Set_Pin_Val( LCD_U8_CTRL_PORT  , LCD_U8_E_PIN   , DIO_U8_LOW   ) ;
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_U8_Set_Pin_Val>


}
    1bf4:	2f 96       	adiw	r28, 0x0f	; 15
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_Write_Str>:

void LCD_Write_Str ( u8 * str ,u8 x_pos , u8 y_pos )
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <LCD_Write_Str+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <LCD_Write_Str+0x8>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	6b 83       	std	Y+3, r22	; 0x03
    1c18:	4c 83       	std	Y+4, r20	; 0x04
	LCD_MoveCursor (  x_pos ,  y_pos ) ;
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	6c 81       	ldd	r22, Y+4	; 0x04
    1c1e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_MoveCursor>
    1c22:	21 c0       	rjmp	.+66     	; 0x1c66 <LCD_Write_Str+0x60>
	while ( *str != '\0')
	{
		if ( (x_pos == 16 ) && ( y_pos == 0 ))
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	80 31       	cpi	r24, 0x10	; 16
    1c28:	39 f4       	brne	.+14     	; 0x1c38 <LCD_Write_Str+0x32>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	88 23       	and	r24, r24
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <LCD_Write_Str+0x32>
		{
			LCD_MoveCursor ( 0 , 1 ) ;
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_MoveCursor>
		}
		if ( (x_pos == 16 ) && ( y_pos == 1 ) )
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	80 31       	cpi	r24, 0x10	; 16
    1c3c:	39 f4       	brne	.+14     	; 0x1c4c <LCD_Write_Str+0x46>
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <LCD_Write_Str+0x46>
		{
			LCD_MoveCursor ( 0 , 0 ) ;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_MoveCursor>
		}
		LCD_Void_Write_Data( *str ) ;
    1c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c50:	80 81       	ld	r24, Z
    1c52:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_Void_Write_Data>
		str ++ ;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
		x_pos++ ;
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	8b 83       	std	Y+3, r24	; 0x03
}

void LCD_Write_Str ( u8 * str ,u8 x_pos , u8 y_pos )
{
	LCD_MoveCursor (  x_pos ,  y_pos ) ;
	while ( *str != '\0')
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 23       	and	r24, r24
    1c6e:	d1 f6       	brne	.-76     	; 0x1c24 <LCD_Write_Str+0x1e>
		str ++ ;
		x_pos++ ;

	}

}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <LCD_MoveCursor>:

void LCD_MoveCursor ( u8 x_pos , u8 y_pos )
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <LCD_MoveCursor+0x6>
    1c84:	0f 92       	push	r0
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Adress = x_pos + ( 64*y_pos) ;
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	00 24       	eor	r0, r0
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	07 94       	ror	r0
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	07 94       	ror	r0
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	80 2d       	mov	r24, r0
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	89 0f       	add	r24, r25
    1cac:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Adress = DDRAM_Adress | 0b10000000;
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	80 68       	ori	r24, 0x80	; 128
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	LCD_Void_Write_CMD( DDRAM_Adress );
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <LCD_Write_Num>:



void LCD_Write_Num ( u32 Num ,u8 x_pos , u8 y_pos )
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	6c 97       	sbiw	r28, 0x1c	; 28
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	6f 8b       	std	Y+23, r22	; 0x17
    1cdc:	78 8f       	std	Y+24, r23	; 0x18
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	4b 8f       	std	Y+27, r20	; 0x1b
    1ce4:	2c 8f       	std	Y+28, r18	; 0x1c
	u8 Rem , index = 0 ;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[20];

	if (Num==0)
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	a9 8d       	ldd	r26, Y+25	; 0x19
    1cee:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	a1 05       	cpc	r26, r1
    1cf4:	b1 05       	cpc	r27, r1
    1cf6:	f1 f5       	brne	.+124    	; 0x1d74 <LCD_Write_Num+0xae>
	{
		arr[index]='0';
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	ce 01       	movw	r24, r28
    1d00:	03 96       	adiw	r24, 0x03	; 3
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 e3       	ldi	r24, 0x30	; 48
    1d0a:	80 83       	st	Z, r24
		index++;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	30 c0       	rjmp	.+96     	; 0x1d74 <LCD_Write_Num+0xae>
	}


	while (Num!=0)
	{
		Rem = Num % 10 ;
    1d14:	8f 89       	ldd	r24, Y+23	; 0x17
    1d16:	98 8d       	ldd	r25, Y+24	; 0x18
    1d18:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d1a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 1e 11 	call	0x223c	; 0x223c <__udivmodsi4>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]= Rem + '0' ;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	40 5d       	subi	r20, 0xD0	; 208
    1d3e:	ce 01       	movw	r24, r28
    1d40:	03 96       	adiw	r24, 0x03	; 3
    1d42:	fc 01       	movw	r30, r24
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	40 83       	st	Z, r20
		index++;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	89 83       	std	Y+1, r24	; 0x01
		Num /= 10 ;
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d56:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 1e 11 	call	0x223c	; 0x223c <__udivmodsi4>
    1d68:	da 01       	movw	r26, r20
    1d6a:	c9 01       	movw	r24, r18
    1d6c:	8f 8b       	std	Y+23, r24	; 0x17
    1d6e:	98 8f       	std	Y+24, r25	; 0x18
    1d70:	a9 8f       	std	Y+25, r26	; 0x19
    1d72:	ba 8f       	std	Y+26, r27	; 0x1a
		arr[index]='0';
		index++;
	}


	while (Num!=0)
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d7a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	a1 05       	cpc	r26, r1
    1d80:	b1 05       	cpc	r27, r1
    1d82:	41 f6       	brne	.-112    	; 0x1d14 <LCD_Write_Num+0x4e>
		Rem = Num % 10 ;
		arr[index]= Rem + '0' ;
		index++;
		Num /= 10 ;
	}
	arr[index]='\0';
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	03 96       	adiw	r24, 0x03	; 3
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	10 82       	st	Z, r1
	reverse (arr , index );
    1d96:	ce 01       	movw	r24, r28
    1d98:	03 96       	adiw	r24, 0x03	; 3
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <reverse>
	LCD_Write_Str ( arr , x_pos ,  y_pos ) ;
    1da0:	ce 01       	movw	r24, r28
    1da2:	03 96       	adiw	r24, 0x03	; 3
    1da4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1da6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1da8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_Write_Str>

}
    1dac:	6c 96       	adiw	r28, 0x1c	; 28
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <reverse>:

void reverse (u8 * ptr , u8 element )
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	29 97       	sbiw	r28, 0x09	; 9
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	98 87       	std	Y+8, r25	; 0x08
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	69 87       	std	Y+9, r22	; 0x09
	u8 start =0 ;
    1dd8:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element - 1 ;
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	81 50       	subi	r24, 0x01	; 1
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	33 c0       	rjmp	.+102    	; 0x1e48 <reverse+0x8a>

	while (start < end)
	{

		//Swap
		 u32 temp = ptr[start];
    1de2:	8e 81       	ldd	r24, Y+6	; 0x06
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dea:	98 85       	ldd	r25, Y+8	; 0x08
    1dec:	fc 01       	movw	r30, r24
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	80 81       	ld	r24, Z
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	ab 83       	std	Y+3, r26	; 0x03
    1e02:	bc 83       	std	Y+4, r27	; 0x04
		 ptr[start] = ptr[end];
    1e04:	8e 81       	ldd	r24, Y+6	; 0x06
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0c:	98 85       	ldd	r25, Y+8	; 0x08
    1e0e:	dc 01       	movw	r26, r24
    1e10:	a2 0f       	add	r26, r18
    1e12:	b3 1f       	adc	r27, r19
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1c:	98 85       	ldd	r25, Y+8	; 0x08
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	80 81       	ld	r24, Z
    1e26:	8c 93       	st	X, r24
		 ptr[end] = temp;
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e30:	98 85       	ldd	r25, Y+8	; 0x08
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	80 83       	st	Z, r24

	start++;
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	8e 83       	std	Y+6, r24	; 0x06
	end--;
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	81 50       	subi	r24, 0x01	; 1
    1e46:	8d 83       	std	Y+5, r24	; 0x05
void reverse (u8 * ptr , u8 element )
{
	u8 start =0 ;
	u8 end = element - 1 ;

	while (start < end)
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	98 17       	cp	r25, r24
    1e4e:	48 f2       	brcs	.-110    	; 0x1de2 <reverse+0x24>
		 ptr[end] = temp;

	start++;
	end--;
	}
}
    1e50:	29 96       	adiw	r28, 0x09	; 9
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_SET_CGRAM>:

void LCD_SET_CGRAM ( u8 address )
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_SET_CGRAM+0x6>
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 CGRAM_Address = ( 0b01000000 | address ) ;
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	80 64       	ori	r24, 0x40	; 64
    1e72:	89 83       	std	Y+1, r24	; 0x01
	LCD_Void_Write_CMD( CGRAM_Address );
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_Disdlay_Clear>:

void LCD_Disdlay_Clear ()
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
	LCD_Void_Write_CMD( 0b00000001 );
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_Void_Write_CMD>
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <main>:
#include"KPD_Interface.h"
#include"LCD_Interface.h"
#include "util/delay.h"

int main (void)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	a0 97       	sbiw	r28, 0x20	; 32
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61


	LCD_Void_Init () ;
    1eac:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_Void_Init>
	KPD_Init() ;
    1eb0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <KPD_Init>

	LCD_Write_Str ( "Welcome" , 4 , 0 ) ;
    1eb4:	80 e6       	ldi	r24, 0x60	; 96
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	64 e0       	ldi	r22, 0x04	; 4
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_Write_Str>
	LCD_Write_Str ( "Calculator" , 3 , 1 ) ;
    1ec0:	88 e6       	ldi	r24, 0x68	; 104
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_Write_Str>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	aa ef       	ldi	r26, 0xFA	; 250
    1ed2:	b4 e4       	ldi	r27, 0x44	; 68
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
    1ed6:	9c 87       	std	Y+12, r25	; 0x0c
    1ed8:	ad 87       	std	Y+13, r26	; 0x0d
    1eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f 83       	std	Y+7, r24	; 0x07
    1ef6:	98 87       	std	Y+8, r25	; 0x08
    1ef8:	a9 87       	std	Y+9, r26	; 0x09
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <main+0x86>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <main+0x104>
	else if (__tmp > 65535)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <main+0xe6>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <main+0xd4>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <main+0xc8>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <main+0x110>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_Disdlay_Clear () ;
    1fb0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_Disdlay_Clear>

	u8 PressKey = KPD_Key_NotPressed , operator = 0 ;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb8:	1d 8e       	std	Y+29, r1	; 0x1d
	u32 Num1=0 ,Num2=0 , Res=0 ;
    1fba:	19 8e       	std	Y+25, r1	; 0x19
    1fbc:	1a 8e       	std	Y+26, r1	; 0x1a
    1fbe:	1b 8e       	std	Y+27, r1	; 0x1b
    1fc0:	1c 8e       	std	Y+28, r1	; 0x1c
    1fc2:	1d 8a       	std	Y+21, r1	; 0x15
    1fc4:	1e 8a       	std	Y+22, r1	; 0x16
    1fc6:	1f 8a       	std	Y+23, r1	; 0x17
    1fc8:	18 8e       	std	Y+24, r1	; 0x18
    1fca:	19 8a       	std	Y+17, r1	; 0x11
    1fcc:	1a 8a       	std	Y+18, r1	; 0x12
    1fce:	1b 8a       	std	Y+19, r1	; 0x13
    1fd0:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Counter_n1 = 0 , counter_n2 = 0 ;
    1fd2:	18 8a       	std	Y+16, r1	; 0x10
    1fd4:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
		PressKey = KPD_Void_GET_Status ( ) ;
    1fd6:	0e 94 ae 09 	call	0x135c	; 0x135c <KPD_Void_GET_Status>
    1fda:	8e 8f       	std	Y+30, r24	; 0x1e

		if ( PressKey >= '0' && PressKey <= '9')
    1fdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fde:	80 33       	cpi	r24, 0x30	; 48
    1fe0:	08 f4       	brcc	.+2      	; 0x1fe4 <main+0x14c>
    1fe2:	4e c0       	rjmp	.+156    	; 0x2080 <main+0x1e8>
    1fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe6:	8a 33       	cpi	r24, 0x3A	; 58
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <main+0x154>
    1fea:	4a c0       	rjmp	.+148    	; 0x2080 <main+0x1e8>
		{
			LCD_Void_Write_Data ( PressKey ) ;
    1fec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fee:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_Void_Write_Data>
			if ( operator == 0 )
    1ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff4:	88 23       	and	r24, r24
    1ff6:	11 f5       	brne	.+68     	; 0x203c <main+0x1a4>
			{
				Num1= Num1*10 + ( PressKey - '0') ;
    1ff8:	89 8d       	ldd	r24, Y+25	; 0x19
    1ffa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ffc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ffe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulsi3>
    2010:	9b 01       	movw	r18, r22
    2012:	ac 01       	movw	r20, r24
    2014:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	c0 97       	sbiw	r24, 0x30	; 48
    201c:	aa 27       	eor	r26, r26
    201e:	97 fd       	sbrc	r25, 7
    2020:	a0 95       	com	r26
    2022:	ba 2f       	mov	r27, r26
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	a4 1f       	adc	r26, r20
    202a:	b5 1f       	adc	r27, r21
    202c:	89 8f       	std	Y+25, r24	; 0x19
    202e:	9a 8f       	std	Y+26, r25	; 0x1a
    2030:	ab 8f       	std	Y+27, r26	; 0x1b
    2032:	bc 8f       	std	Y+28, r27	; 0x1c
				Counter_n1++ ;
    2034:	88 89       	ldd	r24, Y+16	; 0x10
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	88 8b       	std	Y+16, r24	; 0x10
    203a:	cd cf       	rjmp	.-102    	; 0x1fd6 <main+0x13e>
			}
			else
			{
				Num2= Num2*10 + ( PressKey - '0') ;
    203c:	8d 89       	ldd	r24, Y+21	; 0x15
    203e:	9e 89       	ldd	r25, Y+22	; 0x16
    2040:	af 89       	ldd	r26, Y+23	; 0x17
    2042:	b8 8d       	ldd	r27, Y+24	; 0x18
    2044:	2a e0       	ldi	r18, 0x0A	; 10
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulsi3>
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	c0 97       	sbiw	r24, 0x30	; 48
    2060:	aa 27       	eor	r26, r26
    2062:	97 fd       	sbrc	r25, 7
    2064:	a0 95       	com	r26
    2066:	ba 2f       	mov	r27, r26
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
    206c:	a4 1f       	adc	r26, r20
    206e:	b5 1f       	adc	r27, r21
    2070:	8d 8b       	std	Y+21, r24	; 0x15
    2072:	9e 8b       	std	Y+22, r25	; 0x16
    2074:	af 8b       	std	Y+23, r26	; 0x17
    2076:	b8 8f       	std	Y+24, r27	; 0x18
				counter_n2++;
    2078:	8f 85       	ldd	r24, Y+15	; 0x0f
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	8f 87       	std	Y+15, r24	; 0x0f
    207e:	ab cf       	rjmp	.-170    	; 0x1fd6 <main+0x13e>
			}
		}
		else if ( PressKey=='+' || PressKey=='-' || PressKey=='*' || PressKey=='/' )
    2080:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2082:	8b 32       	cpi	r24, 0x2B	; 43
    2084:	49 f0       	breq	.+18     	; 0x2098 <main+0x200>
    2086:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2088:	8d 32       	cpi	r24, 0x2D	; 45
    208a:	31 f0       	breq	.+12     	; 0x2098 <main+0x200>
    208c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    208e:	8a 32       	cpi	r24, 0x2A	; 42
    2090:	19 f0       	breq	.+6      	; 0x2098 <main+0x200>
    2092:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2094:	8f 32       	cpi	r24, 0x2F	; 47
    2096:	31 f4       	brne	.+12     	; 0x20a4 <main+0x20c>
		{
			LCD_Void_Write_Data ( PressKey ) ;
    2098:	8e 8d       	ldd	r24, Y+30	; 0x1e
    209a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_Void_Write_Data>
			operator = PressKey ;
    209e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a0:	8d 8f       	std	Y+29, r24	; 0x1d
    20a2:	99 cf       	rjmp	.-206    	; 0x1fd6 <main+0x13e>
		}
		else if ( PressKey == '=')
    20a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a6:	8d 33       	cpi	r24, 0x3D	; 61
    20a8:	09 f0       	breq	.+2      	; 0x20ac <main+0x214>
    20aa:	99 c0       	rjmp	.+306    	; 0x21de <main+0x346>
		{
			LCD_Void_Write_Data ( PressKey ) ;
    20ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ae:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_Void_Write_Data>
			switch ( operator )
    20b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	38 a3       	std	Y+32, r19	; 0x20
    20ba:	2f 8f       	std	Y+31, r18	; 0x1f
    20bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20be:	98 a1       	ldd	r25, Y+32	; 0x20
    20c0:	8b 32       	cpi	r24, 0x2B	; 43
    20c2:	91 05       	cpc	r25, r1
    20c4:	b1 f0       	breq	.+44     	; 0x20f2 <main+0x25a>
    20c6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    20c8:	38 a1       	ldd	r19, Y+32	; 0x20
    20ca:	2c 32       	cpi	r18, 0x2C	; 44
    20cc:	31 05       	cpc	r19, r1
    20ce:	34 f4       	brge	.+12     	; 0x20dc <main+0x244>
    20d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d2:	98 a1       	ldd	r25, Y+32	; 0x20
    20d4:	8a 32       	cpi	r24, 0x2A	; 42
    20d6:	91 05       	cpc	r25, r1
    20d8:	71 f1       	breq	.+92     	; 0x2136 <main+0x29e>
    20da:	64 c0       	rjmp	.+200    	; 0x21a4 <main+0x30c>
    20dc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    20de:	38 a1       	ldd	r19, Y+32	; 0x20
    20e0:	2d 32       	cpi	r18, 0x2D	; 45
    20e2:	31 05       	cpc	r19, r1
    20e4:	b9 f0       	breq	.+46     	; 0x2114 <main+0x27c>
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	8f 32       	cpi	r24, 0x2F	; 47
    20ec:	91 05       	cpc	r25, r1
    20ee:	b1 f1       	breq	.+108    	; 0x215c <main+0x2c4>
    20f0:	59 c0       	rjmp	.+178    	; 0x21a4 <main+0x30c>
			{
			case '+' :
				Res = Num1 + Num2 ;
    20f2:	89 8d       	ldd	r24, Y+25	; 0x19
    20f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20f6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    20f8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    20fa:	2d 89       	ldd	r18, Y+21	; 0x15
    20fc:	3e 89       	ldd	r19, Y+22	; 0x16
    20fe:	4f 89       	ldd	r20, Y+23	; 0x17
    2100:	58 8d       	ldd	r21, Y+24	; 0x18
    2102:	82 0f       	add	r24, r18
    2104:	93 1f       	adc	r25, r19
    2106:	a4 1f       	adc	r26, r20
    2108:	b5 1f       	adc	r27, r21
    210a:	89 8b       	std	Y+17, r24	; 0x11
    210c:	9a 8b       	std	Y+18, r25	; 0x12
    210e:	ab 8b       	std	Y+19, r26	; 0x13
    2110:	bc 8b       	std	Y+20, r27	; 0x14
    2112:	51 c0       	rjmp	.+162    	; 0x21b6 <main+0x31e>
				break;

			case '-' :
				Res = Num1 - Num2 ;
    2114:	89 8d       	ldd	r24, Y+25	; 0x19
    2116:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2118:	ab 8d       	ldd	r26, Y+27	; 0x1b
    211a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    211c:	2d 89       	ldd	r18, Y+21	; 0x15
    211e:	3e 89       	ldd	r19, Y+22	; 0x16
    2120:	4f 89       	ldd	r20, Y+23	; 0x17
    2122:	58 8d       	ldd	r21, Y+24	; 0x18
    2124:	82 1b       	sub	r24, r18
    2126:	93 0b       	sbc	r25, r19
    2128:	a4 0b       	sbc	r26, r20
    212a:	b5 0b       	sbc	r27, r21
    212c:	89 8b       	std	Y+17, r24	; 0x11
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	ab 8b       	std	Y+19, r26	; 0x13
    2132:	bc 8b       	std	Y+20, r27	; 0x14
    2134:	40 c0       	rjmp	.+128    	; 0x21b6 <main+0x31e>
				break;

			case '*' :
				Res = Num1 * Num2 ;
    2136:	89 8d       	ldd	r24, Y+25	; 0x19
    2138:	9a 8d       	ldd	r25, Y+26	; 0x1a
    213a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    213c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    213e:	2d 89       	ldd	r18, Y+21	; 0x15
    2140:	3e 89       	ldd	r19, Y+22	; 0x16
    2142:	4f 89       	ldd	r20, Y+23	; 0x17
    2144:	58 8d       	ldd	r21, Y+24	; 0x18
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulsi3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	89 8b       	std	Y+17, r24	; 0x11
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	ab 8b       	std	Y+19, r26	; 0x13
    2158:	bc 8b       	std	Y+20, r27	; 0x14
    215a:	2d c0       	rjmp	.+90     	; 0x21b6 <main+0x31e>
				break;

			case '/' :
				if ( Num2 == 0)
    215c:	8d 89       	ldd	r24, Y+21	; 0x15
    215e:	9e 89       	ldd	r25, Y+22	; 0x16
    2160:	af 89       	ldd	r26, Y+23	; 0x17
    2162:	b8 8d       	ldd	r27, Y+24	; 0x18
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	a1 05       	cpc	r26, r1
    2168:	b1 05       	cpc	r27, r1
    216a:	49 f4       	brne	.+18     	; 0x217e <main+0x2e6>
				{
					LCD_Disdlay_Clear () ;
    216c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_Disdlay_Clear>
					LCD_Write_Str ( "Math Error" , 3 , 0 ) ;
    2170:	83 e7       	ldi	r24, 0x73	; 115
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	63 e0       	ldi	r22, 0x03	; 3
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_Write_Str>
    217c:	2c cf       	rjmp	.-424    	; 0x1fd6 <main+0x13e>
					continue;
				}
				else
				{
					Res = Num1 / Num2 ;
    217e:	89 8d       	ldd	r24, Y+25	; 0x19
    2180:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2182:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2184:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2186:	2d 89       	ldd	r18, Y+21	; 0x15
    2188:	3e 89       	ldd	r19, Y+22	; 0x16
    218a:	4f 89       	ldd	r20, Y+23	; 0x17
    218c:	58 8d       	ldd	r21, Y+24	; 0x18
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 1e 11 	call	0x223c	; 0x223c <__udivmodsi4>
    2196:	da 01       	movw	r26, r20
    2198:	c9 01       	movw	r24, r18
    219a:	89 8b       	std	Y+17, r24	; 0x11
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	ab 8b       	std	Y+19, r26	; 0x13
    21a0:	bc 8b       	std	Y+20, r27	; 0x14
    21a2:	09 c0       	rjmp	.+18     	; 0x21b6 <main+0x31e>
				}
				break;

			default :
				LCD_Disdlay_Clear () ;
    21a4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_Disdlay_Clear>
				LCD_Write_Str ( "Invalid Operator" ,0 , 0 ) ;
    21a8:	8e e7       	ldi	r24, 0x7E	; 126
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_Write_Str>
    21b4:	10 cf       	rjmp	.-480    	; 0x1fd6 <main+0x13e>
				continue;
			}
			LCD_Write_Num ( Res ,0 , 1 ) ;
    21b6:	89 89       	ldd	r24, Y+17	; 0x11
    21b8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ba:	ab 89       	ldd	r26, Y+19	; 0x13
    21bc:	bc 89       	ldd	r27, Y+20	; 0x14
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	21 e0       	ldi	r18, 0x01	; 1
    21c6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_Write_Num>
			Num1 = 0;
    21ca:	19 8e       	std	Y+25, r1	; 0x19
    21cc:	1a 8e       	std	Y+26, r1	; 0x1a
    21ce:	1b 8e       	std	Y+27, r1	; 0x1b
    21d0:	1c 8e       	std	Y+28, r1	; 0x1c
			Num2 = 0;
    21d2:	1d 8a       	std	Y+21, r1	; 0x15
    21d4:	1e 8a       	std	Y+22, r1	; 0x16
    21d6:	1f 8a       	std	Y+23, r1	; 0x17
    21d8:	18 8e       	std	Y+24, r1	; 0x18
			operator = 0;
    21da:	1d 8e       	std	Y+29, r1	; 0x1d
    21dc:	fc ce       	rjmp	.-520    	; 0x1fd6 <main+0x13e>
		}
		else if ( PressKey == 'c')
    21de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e0:	83 36       	cpi	r24, 0x63	; 99
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <main+0x34e>
    21e4:	f8 ce       	rjmp	.-528    	; 0x1fd6 <main+0x13e>
		{
			LCD_Disdlay_Clear () ;
    21e6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_Disdlay_Clear>
			Num1 = 0;
    21ea:	19 8e       	std	Y+25, r1	; 0x19
    21ec:	1a 8e       	std	Y+26, r1	; 0x1a
    21ee:	1b 8e       	std	Y+27, r1	; 0x1b
    21f0:	1c 8e       	std	Y+28, r1	; 0x1c
			Num2 = 0;
    21f2:	1d 8a       	std	Y+21, r1	; 0x15
    21f4:	1e 8a       	std	Y+22, r1	; 0x16
    21f6:	1f 8a       	std	Y+23, r1	; 0x17
    21f8:	18 8e       	std	Y+24, r1	; 0x18
			operator = 0;
    21fa:	1d 8e       	std	Y+29, r1	; 0x1d
    21fc:	ec ce       	rjmp	.-552    	; 0x1fd6 <main+0x13e>

000021fe <__mulsi3>:
    21fe:	62 9f       	mul	r22, r18
    2200:	d0 01       	movw	r26, r0
    2202:	73 9f       	mul	r23, r19
    2204:	f0 01       	movw	r30, r0
    2206:	82 9f       	mul	r24, r18
    2208:	e0 0d       	add	r30, r0
    220a:	f1 1d       	adc	r31, r1
    220c:	64 9f       	mul	r22, r20
    220e:	e0 0d       	add	r30, r0
    2210:	f1 1d       	adc	r31, r1
    2212:	92 9f       	mul	r25, r18
    2214:	f0 0d       	add	r31, r0
    2216:	83 9f       	mul	r24, r19
    2218:	f0 0d       	add	r31, r0
    221a:	74 9f       	mul	r23, r20
    221c:	f0 0d       	add	r31, r0
    221e:	65 9f       	mul	r22, r21
    2220:	f0 0d       	add	r31, r0
    2222:	99 27       	eor	r25, r25
    2224:	72 9f       	mul	r23, r18
    2226:	b0 0d       	add	r27, r0
    2228:	e1 1d       	adc	r30, r1
    222a:	f9 1f       	adc	r31, r25
    222c:	63 9f       	mul	r22, r19
    222e:	b0 0d       	add	r27, r0
    2230:	e1 1d       	adc	r30, r1
    2232:	f9 1f       	adc	r31, r25
    2234:	bd 01       	movw	r22, r26
    2236:	cf 01       	movw	r24, r30
    2238:	11 24       	eor	r1, r1
    223a:	08 95       	ret

0000223c <__udivmodsi4>:
    223c:	a1 e2       	ldi	r26, 0x21	; 33
    223e:	1a 2e       	mov	r1, r26
    2240:	aa 1b       	sub	r26, r26
    2242:	bb 1b       	sub	r27, r27
    2244:	fd 01       	movw	r30, r26
    2246:	0d c0       	rjmp	.+26     	; 0x2262 <__udivmodsi4_ep>

00002248 <__udivmodsi4_loop>:
    2248:	aa 1f       	adc	r26, r26
    224a:	bb 1f       	adc	r27, r27
    224c:	ee 1f       	adc	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	a2 17       	cp	r26, r18
    2252:	b3 07       	cpc	r27, r19
    2254:	e4 07       	cpc	r30, r20
    2256:	f5 07       	cpc	r31, r21
    2258:	20 f0       	brcs	.+8      	; 0x2262 <__udivmodsi4_ep>
    225a:	a2 1b       	sub	r26, r18
    225c:	b3 0b       	sbc	r27, r19
    225e:	e4 0b       	sbc	r30, r20
    2260:	f5 0b       	sbc	r31, r21

00002262 <__udivmodsi4_ep>:
    2262:	66 1f       	adc	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	1a 94       	dec	r1
    226c:	69 f7       	brne	.-38     	; 0x2248 <__udivmodsi4_loop>
    226e:	60 95       	com	r22
    2270:	70 95       	com	r23
    2272:	80 95       	com	r24
    2274:	90 95       	com	r25
    2276:	9b 01       	movw	r18, r22
    2278:	ac 01       	movw	r20, r24
    227a:	bd 01       	movw	r22, r26
    227c:	cf 01       	movw	r24, r30
    227e:	08 95       	ret

00002280 <__prologue_saves__>:
    2280:	2f 92       	push	r2
    2282:	3f 92       	push	r3
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	af 92       	push	r10
    2292:	bf 92       	push	r11
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	ca 1b       	sub	r28, r26
    22aa:	db 0b       	sbc	r29, r27
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	09 94       	ijmp

000022b8 <__epilogue_restores__>:
    22b8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ba:	39 88       	ldd	r3, Y+17	; 0x11
    22bc:	48 88       	ldd	r4, Y+16	; 0x10
    22be:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ca:	b9 84       	ldd	r11, Y+9	; 0x09
    22cc:	c8 84       	ldd	r12, Y+8	; 0x08
    22ce:	df 80       	ldd	r13, Y+7	; 0x07
    22d0:	ee 80       	ldd	r14, Y+6	; 0x06
    22d2:	fd 80       	ldd	r15, Y+5	; 0x05
    22d4:	0c 81       	ldd	r16, Y+4	; 0x04
    22d6:	1b 81       	ldd	r17, Y+3	; 0x03
    22d8:	aa 81       	ldd	r26, Y+2	; 0x02
    22da:	b9 81       	ldd	r27, Y+1	; 0x01
    22dc:	ce 0f       	add	r28, r30
    22de:	d1 1d       	adc	r29, r1
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	ed 01       	movw	r28, r26
    22ec:	08 95       	ret

000022ee <_exit>:
    22ee:	f8 94       	cli

000022f0 <__stop_program>:
    22f0:	ff cf       	rjmp	.-2      	; 0x22f0 <__stop_program>
